@using Nethereum.ABI.Model
@model Nethereum.Generator.Console.ServiceModel
using System;
using System.Threading.Tasks;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Web3;

namespace @Model.Namespace
{
   public class @(Model.ContractName)Service
   {
        private readonly Web3 web3;

        public static string ABI = @@"@Raw(Model.Abi.Replace("\"", "'"))";

        public static string BYTE_CODE = "@Raw(Model.ByteCode)";

		public static Task<string> DeployContractAsync(Web3 web3, string addressFrom, @Model.GenerateConstructorInputParameters() HexBigInteger gas = null, HexBigInteger valueAmount = null) 
        {
            return web3.Eth.DeployContract.SendRequestAsync(ABI, BYTE_CODE, addressFrom, gas, valueAmount @Model.GenerateConstructorParameters() );
        }

        private Contract contract;

        public @(Model.ContractName)Service(Web3 web3, string address)
        {
            this.web3 = web3;
            this.contract = web3.Eth.GetContract(ABI, address);
        }
@foreach (var function in @Model.Contract.Functions) {
<text>
        public Function GetFunction@(Model.CapitaliseFirstChar(function.Name))()
        {
            return contract.GetFunction("@(function.Name)");
        }
</text>
}
@foreach (var eventItem in @Model.Contract.Events) {
<text>
        public Event GetEvent@(Model.CapitaliseFirstChar(eventItem.Name))()
        {
            return contract.GetEvent("@(eventItem.Name)");
        }
</text>
}		 
@foreach (var function in @Model.Contract.Functions) //Function calls 1 parameter output
{
    if (function.OutputParameters != null && function.OutputParameters.Length == 1)
    {
<text>
        public Task@(Raw(Model.GetGenericReturnType(function))) @(Model.CapitaliseFirstChar(function.Name))AsyncCall(@(Raw(Model.GenerateFunctionInputParameters(function.InputParameters))))
        {
           var function = GetFunction@(Model.CapitaliseFirstChar(function.Name))();
           return function.CallAsync@(Raw(Model.GetGenericReturnType(function)))(@(Raw((Model.GenerateFunctionParameters(function.InputParameters)))));
        }
</text>
    }
}
@foreach (var function in @Model.Contract.Functions) //Function calls >1 parameter output
{
    if (function.OutputParameters != null && function.OutputParameters.Length > 1)
    {
<text>
        public Task<@(Model.CapitaliseFirstChar(function.Name))DTO> @(Model.CapitaliseFirstChar(function.Name))AsyncCall(@(Raw(Model.GenerateFunctionInputParameters(function.InputParameters))))
        {
           var function = GetFunction@(Model.CapitaliseFirstChar(function.Name))();
           return function.CallAsync<@(Model.CapitaliseFirstChar(function.Name))DTO>(@(Raw((Model.GenerateFunctionParameters(function.InputParameters)))));
        }
</text>
    }
}
@foreach (var function in @Model.Contract.Functions) //Function transactions
{
    if (function.Constant == false)
    {
<text>
        public Task<string> @(Model.CapitaliseFirstChar(function.Name))Async(string addressFrom, @(Raw(Model.GenerateFunctionTransactionInputParameters(function.InputParameters))) HexBigInteger gas = null, HexBigInteger valueAmount = null)
        {
           var function = GetFunction@(Model.CapitaliseFirstChar(function.Name))();
           return function.SendTransactionAsync(addressFrom, gas, valueAmount@(Raw(Model.GenerateFunctionParametersCommaPrefix(function.InputParameters))));
        }
</text>
    }
}    
    }

@foreach (var function in @Model.Contract.Functions) //Function DTOS >1 parameter output
{
    if (function.OutputParameters != null && function.OutputParameters.Length > 1)
    {
<text>
    [FunctionOutput]
    public class @Model.CapitaliseFirstChar(function.Name)DTO
    {
	    @foreach (var parameter in function.OutputParameters)
	    {
<text>
        [Parameter("@parameter.Type", "@parameter.Name", @parameter.Order)]
        public @(Raw(Model.GetTypeMap(parameter.Type, true))) @Model.CapitaliseFirstChar(Model.GetParameterName(parameter.Name, parameter.Order)) {get; set;}
</text>
	    }
    }
</text>
    }
}

    
@foreach (var eventItem in @Model.Contract.Events) //Event DTOS 
{
    if (eventItem.InputParameters != null && eventItem.InputParameters.Length > 1)
    {
<text>
    public class @(Model.CapitaliseFirstChar(eventItem.Name))EventDTO
    {
	    @foreach (var parameter in eventItem.InputParameters)
	    {
<text>
        [Parameter("@parameter.Type", "@parameter.Name", @parameter.Order, @(Model.GetBooleanAsString(parameter.Indexed)))]
        public @(Raw(Model.GetTypeMap(parameter.Type, true))) @Model.CapitaliseFirstChar(Model.GetParameterName(parameter.Name, parameter.Order)) { get; set; }
</text>
	    }
    }
</text>
    }
}    

}
